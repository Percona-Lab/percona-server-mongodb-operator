#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

check_cr_config() {
    local cluster="$1"

    # apply cr config
    kubectl apply \
        -f $test_dir/conf/$cluster.yml

    # check if at least 1 Pod started
    wait_pod $cluster-arbiter-0
    wait_for_running $cluster 2
    sleep 10

    # check if statefulset created with expected config
    compare_kubectl statefulset/$cluster-arbiter
    arbiter_ip=$(get_service_ip $cluster-arbiter-0)
    run_mongo "rs.conf()" "clusterAdmin:clusterAdmin123456@$(get_service_ip $cluster-0),$(get_service_ip $cluster-1),$(get_service_ip $cluster-arbiter-0)" "mongodb" \
        | grep '"host" :' \
        | grep "$arbiter_ip"

    # check read and write
    run_mongo \
        'db.createUser({user:"myApp",pwd:"myPass",roles:[{db:"myApp",role:"readWrite"}]})' \
        "userAdmin:userAdmin123456@$(get_service_ip $cluster-0),$(get_service_ip $cluster-1)" \
        "mongodb" ":27017"
    run_mongo \
        'use myApp\n db.test.insert({ x: 100500 })' \
        "myApp:myPass@$(get_service_ip $cluster-0),$(get_service_ip $cluster-1)" \
        "mongodb" ":27017"
    compare_mongo_cmd "find" "myApp:myPass@$(get_service_ip $cluster-0)" "" ":27017"
    compare_mongo_cmd "find" "myApp:myPass@$(get_service_ip $cluster-1)" "" ":27017"

    desc 'kill Primary Pod, check reelection, check data'
    initial_primary=$(get_mongo_primary "clusterAdmin:clusterAdmin123456@$(get_service_ip $cluster-0),$(get_service_ip $cluster-1),$(get_service_ip $cluster-arbiter-0)")
    kubectl delete pods $initial_primary
    changed_primary=$(get_mongo_primary "clusterAdmin:clusterAdmin123456@$(get_service_ip $cluster-0),$(get_service_ip $cluster-1),$(get_service_ip $cluster-arbiter-0)")
    [ "$initial_primary" != "$changed_primary" ]
    wait_for_running $cluster 2
    compare_mongo_cmd "find" "myApp:myPass@$(get_service_ip $cluster-0)" "" ":27017"
    compare_mongo_cmd "find" "myApp:myPass@$(get_service_ip $cluster-1)" "" ":27017"

    # delete cluster
    kubectl delete \
        -f $test_dir/conf/$cluster.yml
}

main() {
    create_namespace $namespace
    deploy_operator
    kubectl apply \
        -f $conf_dir/client.yml \
        -f $conf_dir/secrets.yml

    desc 'check arbiter without service-per-pod'
    check_cr_config "arbiter-rs0"

    desc 'check arbiter with ClusterIP'
    check_cr_config "arbiter-clusterip-rs0"

    destroy $namespace
}

main
