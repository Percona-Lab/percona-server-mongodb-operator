#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

label_node() {
    LABELED_NODE=$(kubectl_bin get nodes -o custom-columns=NAME:.metadata.name --no-headers=true | head -n1)

    kubectl_bin label nodes "${LABELED_NODE}" backupWorker=True --overwrite
}

unlabel_node() {
    kubectl_bin label nodes "${LABELED_NODE}" backupWorker- --overwrite
}

create_namespace $namespace
deploy_helm $namespace
deploy_operator

desc 'install Minio'
helm del --purge minio-service || :
helm install \
    --name minio-service \
    --set accessKey=some-access-key \
    --set secretKey=some-secret-key \
    --set service.type=ClusterIP \
    --set configPath=/tmp/.minio/ \
    --set persistence.size=2G \
    --set environment.MINIO_REGION=us-east-1 \
    --set environment.MINIO_HTTP_TRACE=/tmp/trace.log \
    stable/minio
MINIO_POD=$(kubectl_bin get pods --selector=release=minio-service -o 'jsonpath={.items[].metadata.name}')
wait_pod $MINIO_POD

# create bucket
kubectl_bin run -i --rm aws-cli --image=perconalab/awscli --restart=Never -- \
    /usr/bin/env AWS_ACCESS_KEY_ID=some-access-key AWS_SECRET_ACCESS_KEY=some-secret-key AWS_DEFAULT_REGION=us-east-1 \
    /usr/bin/aws --endpoint-url http://minio-service:9000 s3 mb s3://operator-testing

label_node

cat - <<-EOF | kubectl apply -f -
        apiVersion: scheduling.k8s.io/v1beta1
        kind: PriorityClass
        metadata:
            name: high-priority
        value: 1000000
        globalDefault: false
        description: "This priority class should be used for backup service pods only."
EOF

desc 'create first PSMDB cluster'
cluster="some-name-rs0"
kubectl_bin apply \
    -f $conf_dir/cloud-secret.yml \
    -f $conf_dir/minio-secret.yml \
    -f $conf_dir/secrets.yml \
    -f $conf_dir/client.yml

apply_cluster $test_dir/conf/$cluster.yml
desc 'check if all 3 Pods started'
wait_for_running $cluster 3

desc 'check if service and statefulset created with expected config'
compare_kubectl statefulset/$cluster

desc 'write data, read from all'
run_mongo \
    'db.createUser({user:"myApp",pwd:"myPass",roles:[{db:"myApp",role:"readWrite"}]})' \
    "userAdmin:userAdmin123456@$cluster.$namespace"
sleep 2
run_mongo \
    'use myApp\n db.test.insert({ x: 100500 })' \
    "myApp:myPass@$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace"

wait_backup_agent $cluster-0
wait_backup_agent $cluster-1
wait_backup_agent $cluster-2

desc 'add backups schedule, wait for the first backup'
apply_cluster $test_dir/conf/$cluster-2.yml
wait_cron ${cluster%%-rs0}-backup-every-min-aws-s3
wait_cron ${cluster%%-rs0}-backup-every-min-minio
wait_cron ${cluster%%-rs0}-backup-every-min-gcp-cs
compare_kubectl cronjob/${cluster%%-rs0}-backup-every-min-aws-s3
compare_kubectl cronjob/${cluster%%-rs0}-backup-every-min-minio
compare_kubectl cronjob/${cluster%%-rs0}-backup-every-min-gcp-cs
sleep 35

apply_cluster $test_dir/conf/$cluster.yml
backup_name_aws=$(kubectl_bin get psmdb-backup  | grep aws-s3 | awk '{print$1}' | head -1)
backup_name_minio=$(kubectl_bin get psmdb-backup | grep minio | awk '{print$1}' | head -1)
backup_name_gcp=$(kubectl_bin get psmdb-backup  | grep gcp-cs | awk '{print$1}' | head -1)
wait_backup "$backup_name_aws"
wait_backup "$backup_name_minio"
wait_backup "$backup_name_gcp"

sleep 5

desc 'check backup and restore -- aws-s3'
backup_dest_aws=$(get_backup_dest   "$backup_name_aws")
curl -s "https://s3.amazonaws.com/operator-testing/${backup_dest_aws}_rs0.dump.gz" | gunzip > /dev/null
run_restore $backup_name_aws 3
wait_restore $backup_name_aws 3

desc 'check backup and restore -- minio'
backup_dest_minio=$(get_backup_dest "$backup_name_minio")
kubectl_bin run -i --rm aws-cli --image=perconalab/awscli --restart=Never -- \
    /usr/bin/env AWS_ACCESS_KEY_ID=some-access-key AWS_SECRET_ACCESS_KEY=some-secret-key AWS_DEFAULT_REGION=us-east-1 \
    /usr/bin/aws --endpoint-url http://minio-service:9000 s3 ls s3://operator-testing/${backup_dest_minio} \
        | grep ${backup_dest_minio}_rs0.dump.gz
run_restore $backup_name_minio 3
wait_restore $backup_name_minio 3

desc 'check backup and restore -- gcp-cs'
backup_dest_gcp=$(get_backup_dest   "$backup_name_gcp")
curl -s "https://storage.googleapis.com/operator-testing/${backup_dest_gcp}_rs0.dump.gz" | gunzip > /dev/null
run_restore $backup_name_gcp 3
wait_restore $backup_name_gcp 3

unlabel_node

destroy $namespace
