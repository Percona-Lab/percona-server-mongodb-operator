// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import sdk "github.com/operator-framework/operator-sdk/pkg/sdk"
import types "k8s.io/apimachinery/pkg/types"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Create provides a mock function with given fields: object
func (_m *Client) Create(object sdk.Object) error {
	ret := _m.Called(object)

	var r0 error
	if rf, ok := ret.Get(0).(func(sdk.Object) error); ok {
		r0 = rf(object)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: object, opts
func (_m *Client) Delete(object sdk.Object, opts ...sdk.DeleteOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, object)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(sdk.Object, ...sdk.DeleteOption) error); ok {
		r0 = rf(object, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: into, opts
func (_m *Client) Get(into sdk.Object, opts ...sdk.GetOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, into)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(sdk.Object, ...sdk.GetOption) error); ok {
		r0 = rf(into, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: namespace, into, opts
func (_m *Client) List(namespace string, into sdk.Object, opts ...sdk.ListOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, namespace, into)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, sdk.Object, ...sdk.ListOption) error); ok {
		r0 = rf(namespace, into, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Patch provides a mock function with given fields: object, pt, patch
func (_m *Client) Patch(object sdk.Object, pt types.PatchType, patch []byte) error {
	ret := _m.Called(object, pt, patch)

	var r0 error
	if rf, ok := ret.Get(0).(func(sdk.Object, types.PatchType, []byte) error); ok {
		r0 = rf(object, pt, patch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: object
func (_m *Client) Update(object sdk.Object) error {
	ret := _m.Called(object)

	var r0 error
	if rf, ok := ret.Get(0).(func(sdk.Object) error); ok {
		r0 = rf(object)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
